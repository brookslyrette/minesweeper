{"version":3,"sources":["minesweeper.js","actions.js","components/Tile.js","components/Board.js","reducer.js","App.js","reportWebVitals.js","index.js"],"names":["generateEmptyBoard","width","height","board","x","y","push","id","isOpen","isBomb","isFlagged","isPressed","adjacentBombCount","openTile","tile","state","console","log","neighbours","filter","t","isNeighbour","calculateAdjacentMineCount","find","length","checkGameStatus","tilesToReveal","i","mineCount","gameState","TILE_CLICKED","TILE_GROUP_CLICKED","FLAG_TITLE","UNFLAG_TILE","TILE_PRESSED","TILE_GROUP_PRESSED","RELEASE_PRESSED","tileClicked","clickedX","clickedY","clicked","minesPlaced","rand","Math","random","boardWidth","boardHeight","debug","count","generateBoard","Tile","item","dispatch","isGameOver","handleMouseUp","type","className","onClick","event","shiftKey","onContextMenu","preventDefault","onMouseDown","button","onMouseUp","onMouseOut","getTileContent","Board","game","items","rowItems","map","DEFAULT_BOARD_SIZE","initialState","reducer","action","config","postClickState","postGroupClickState","forEach","n","tileGroupClicked","itemsFlagged","mineFlagged","mineUnflagged","tilePressed","tileGroupPressed","releasePressed","Error","App","useReducer","useState","difficulty","setDifficulty","itemsPressed","handleValueChange","value","field","onChange","target","isCustom","disabled","e","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c75c6929.chunk.js","sourcesContent":["\nexport const generateEmptyBoard = (width, height) => {\n  const board = [];\n  // create a board for the current game size\n  for (let x = 0; x < height; x++) {\n    for (let y = 0; y < width; y++) {\n      board.push({\n        id: `${x}:${y}`,\n        x,\n        y,\n        isOpen: false,\n        isBomb: false,\n        isFlagged: false,\n        isPressed: false,\n        adjacentBombCount: 0\n      })\n    }\n  }\n  return board\n}\n\nexport const generateBoard = (clickedX, clickedY, state) => {\n  if (state.gameState !== 'initial') {\n    return\n  }\n  let minesPlaced = 0;\n  while (minesPlaced < state.mineCount) {\n    for (let x = 0; x < state.boardHeight; x++) {\n      for (let y = 0; y < state.boardWidth; y++) {\n        // don't place a mine where the user clicked\n        if (x === clickedX && y === clickedY) {\n          continue;\n        } else {\n          const rand = Math.random()\n          const tile = state.board.find(t => t.id === `${x}:${y}`)\n          if (rand > 0.992 && minesPlaced < state.mineCount && !tile.isBomb) {\n            tile.isBomb = true\n            console.log(`planted bomb at ${tile.x}:${tile.y}`);\n            minesPlaced++\n          }\n        }\n      }\n    }\n    console.debug(`finished cycle; planted ${minesPlaced} mines; total mines left to plant: ${state.mineCount - minesPlaced}`)\n  }\n  // now that we've placed all the mines, generate the adjacent mine count for all tiles\n  for (let t of state.board) {\n    const count = calculateAdjacentMineCount(t.x, t.y, state)\n    t.adjacentBombCount = count\n  }\n  state.gameState = 'in-progress'\n}\n\nexport const openTile = (tile, state) => {\n  console.log(`opening ${tile.x}:${tile.y} isBomb: ${tile.isBomb}`)\n  tile.isOpen = true\n  // if we have zero adjacent bombs open our neighbours.\n  if (tile.adjacentBombCount === 0 && !tile.isBomb) {\n    const neighbours = state.board.filter(t => isNeighbour(t, tile) && !t.isBomb && !t.isOpen && !t.isFlagged)\n    for (let n of neighbours) {\n      openTile(n, state)\n    }\n  }\n}\n\nexport const isNeighbour = (t, tile) => {\n  // above and below\n  if (t.x === tile.x && (t.y === tile.y - 1 || t.y === tile.y + 1)) {\n    return true\n  }\n  // to the left and the right\n  else if (t.y === tile.y && (t.x === tile.x - 1 || t.x === tile.x + 1)) {\n    return true\n  }\n  // left 1: above and below\n  if (t.x === tile.x - 1 && (t.y === tile.y - 1 || t.y === tile.y + 1)) {\n    return true\n  }\n  // right 1: above and below\n  if (t.x === tile.x + 1 && (t.y === tile.y - 1 || t.y === tile.y + 1)) {\n    return true\n  }\n  return false\n}\n\nexport const calculateAdjacentMineCount = (x, y, state) => {\n  const tile = state.board.find(t => t.id === `${x}:${y}`);\n  const neighbours = state.board.filter(t => isNeighbour(t, tile))\n  const adjacentBombs = neighbours.filter(t => t.isBomb)\n  return adjacentBombs.length\n}\n\nexport const checkGameStatus = (state) => {\n  let tilesToReveal = 0;\n  for(let i = 0; i < state.board.length; i++) {\n    const t = state.board[i];\n    if (t.isBomb && t.isOpen) {\n      return 'lost'\n    } else if (!t.isOpen) {\n      tilesToReveal++;\n    }\n  }\n  if (tilesToReveal === state.mineCount) {\n    return 'won';\n  }\n  return state.gameState\n}\n","import { openTile, isNeighbour, generateBoard } from './minesweeper'\n\nexport const TILE_CLICKED = 'tile-click'\nexport const TILE_GROUP_CLICKED = 'tile-group-click'\nexport const FLAG_TITLE = 'flag-tile'\nexport const UNFLAG_TILE = 'unflag-tile'\nexport const RESET = 'reset'\nexport const TILE_PRESSED = 'tile-press'\nexport const TILE_GROUP_PRESSED = 'tile-group-press'\nexport const RELEASE_PRESSED = 'release-pressed'\n\nexport const tileGroupClicked = (clickedX, clickedY, state) => {\n  if (state.gameState === 'in-progress') {\n    const clicked = state.board.find(t => t.id === `${clickedX}:${clickedY}`)\n    const neighbours = state.board.filter(t => isNeighbour(t, clicked) && !t.isOpen && !t.isFlagged)\n\n    openTile(clicked, state)\n    neighbours.forEach(n => openTile(n, state));\n  }\n  return {\n    ...state\n  }\n}\n\nexport const tileClicked = (clickedX, clickedY, state) => {\n  const clicked = state.board.find(t => t.id === `${clickedX}:${clickedY}`)\n  if (state.gameState === 'initial') {\n    generateBoard(clickedX, clickedY, state)\n    openTile(clicked, state)\n  } else if (state.gameState === 'in-progress') {\n    openTile(clicked, state)\n  }\n  return {\n    ...state\n  };\n}\n\nexport const mineFlagged = (clickedX, clickedY, state) => {\n  const itemsFlagged = state.board.filter(t => t.isFlagged)\n  if (state.gameState === 'in-progress' && itemsFlagged.length < state.mineCount) {\n    const clicked = state.board.find(t => t.id === `${clickedX}:${clickedY}`)\n    clicked.isFlagged = true\n  }\n\n  return {\n    ...state\n  };\n}\n\nexport const mineUnflagged = (clickedX, clickedY, state) => {\n  if (state.gameState === 'in-progress') {\n    const clicked = state.board.find(t => t.id === `${clickedX}:${clickedY}`)\n    clicked.isFlagged = false\n  }\n\n  return {\n    ...state\n  };\n}\n\nexport const tilePressed = (clickedX, clickedY, state) => {\n  if (state.gameState === 'in-progress' || state.gameState === 'initial') {\n    const clicked = state.board.find(t => t.id === `${clickedX}:${clickedY}`)\n    clicked.isPressed = true\n  }\n\n  return {\n    ...state\n  };\n}\n\nexport const tileGroupPressed = (clickedX, clickedY, state) => {\n  if (state.gameState === 'in-progress') {\n    const clicked = state.board.find(t => t.id === `${clickedX}:${clickedY}`)\n    const neighbours = state.board.filter(t => isNeighbour(t, clicked) && !t.isOpen && !t.isFlagged)\n    clicked.isPressed = true\n    for (let n of neighbours) {\n      n.isPressed = true\n    }\n  }\n\n  return {\n    ...state\n  };\n}\n\nexport const releasePressed = (state) => {\n  for (let t of state.board) {\n    t.isPressed = false\n  }\n  return {\n    ...state\n  };\n}\n","import  { TILE_CLICKED, TILE_GROUP_CLICKED, FLAG_TITLE, UNFLAG_TILE, TILE_PRESSED, TILE_GROUP_PRESSED, RELEASE_PRESSED } from '../actions'\n\nconst Tile = ({ item, dispatch, isGameOver }) => {\n\n  const handleRightClick = (event) => {\n    event.preventDefault()\n    if (item.isOpen) {\n      return;\n    }\n\n    if (!item.isFlagged) {\n      dispatch({ type: FLAG_TITLE, x: item.x, y: item.y })\n    } else {\n      dispatch({ type: UNFLAG_TILE, x: item.x, y: item.y })\n    }\n  }\n\n  const handleClick = (event) => {\n    // if you shift click we click a group of tiles.\n    if (event.shiftKey) {\n      dispatch({ type: TILE_GROUP_CLICKED, x: item.x, y: item.y })\n    } else {\n      if (item.isOpen || item.isFlagged) {\n        return;\n      }\n      dispatch({ type: TILE_CLICKED, x: item.x, y: item.y })\n    }\n  }\n\n  const handleMouseDown = (event) => {\n    // ignore anything that's not a left click\n    if (event.button !== 0) {\n      return\n    }\n    // if you shift click we click a group of tiles.\n    if (event.shiftKey) {\n      dispatch({ type: TILE_GROUP_PRESSED, x: item.x, y: item.y })\n    } else {\n      if (item.isOpen || item.isFlagged) {\n        return;\n      }\n      dispatch({ type: TILE_PRESSED, x: item.x, y: item.y })\n    }\n  }\n\n  const handleMouseUp = () => {\n    dispatch({ type: RELEASE_PRESSED })\n  }\n\n  const getTileContent = (item) => {\n    if (item.isBomb && item.isOpen) {\n      return '💥'\n    }\n    else if (isGameOver && item.isBomb && !item.isOpen && !item.isFlagged) {\n      return '💣';\n    } else if (item.isFlagged) {\n      return '⛳';\n    } else if (item.isOpen && item.adjacentBombCount > 0) {\n      return item.adjacentBombCount;\n    }\n  }\n\n  return (\n    <div\n      className={`tile ${isGameOver ? 'gameOver' : ''} mine-count${ item.isBomb ? '' : item.adjacentBombCount} ${item.isPressed ? 'pressed' : ''} ${item.isOpen ? '' : 'hiddenTile'} ${item.isFlagged ? 'flaggedTile' : ''}`}\n      onClick={handleClick}\n      onContextMenu={handleRightClick}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseOut={handleMouseUp}\n    >\n      {getTileContent(item)}\n    </div>\n  )\n}\n\nexport default Tile\n","import Tile from './Tile'\n\nconst Board = ({ game, dispatch }) => {\n  const items = []\n  const isGameOver = game.gameState === 'won' || game.gameState === 'lost'\n\n  for (let i = 0; i < game.boardHeight; i++) {\n    const rowItems = game.board.filter(t => t.x === i);\n    items.push(\n      <div className=\"row\" key={i}>\n        {rowItems.map(t => (<Tile key={t.id} item={t} isGameOver={isGameOver} dispatch={dispatch} />) )}\n      </div>\n    )\n  }\n\n  return (\n    <>\n      {items}\n    </>\n  )\n}\n\nexport default Board\n","import { generateEmptyBoard, checkGameStatus } from './minesweeper'\nimport {\n  tileClicked,\n  tileGroupClicked,\n  mineFlagged,\n  mineUnflagged,\n  tilePressed,\n  tileGroupPressed,\n  releasePressed,\n  TILE_CLICKED,\n  TILE_GROUP_CLICKED,\n  FLAG_TITLE,\n  UNFLAG_TILE,\n  TILE_PRESSED,\n  TILE_GROUP_PRESSED,\n  RELEASE_PRESSED,\n  RESET\n} from './actions'\n\nexport const DEFAULT_BOARD_SIZE = 10\nexport const DEFAULT_MINE_COUNT = 9\n\nexport const initialState = {\n  gameState: 'initial',\n  boardWidth: DEFAULT_BOARD_SIZE,\n  boardHeight: DEFAULT_BOARD_SIZE,\n  mineCount: DEFAULT_MINE_COUNT,\n  board: generateEmptyBoard(DEFAULT_BOARD_SIZE, DEFAULT_BOARD_SIZE)\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case RESET:\n      return {\n        ...state,\n        gameState: 'initial',\n        boardWidth: action.config.boardWidth,\n        boardHeight: action.config.boardHeight,\n        mineCount: action.config.mineCount,\n        board: generateEmptyBoard(action.config.boardWidth, action.config.boardHeight)\n      }\n    case TILE_CLICKED:\n      const postClickState = tileClicked(action.x, action.y, state)\n      return {\n        ...postClickState,\n        gameState: checkGameStatus(postClickState)\n      };\n    case TILE_GROUP_CLICKED:\n      const postGroupClickState = tileGroupClicked(action.x, action.y, state);\n      return {\n        ...postGroupClickState,\n        gameState: checkGameStatus(postGroupClickState)\n      };\n    case FLAG_TITLE:\n      return mineFlagged(action.x, action.y, state);\n    case UNFLAG_TILE:\n      return mineUnflagged(action.x, action.y, state);\n    case TILE_PRESSED:\n      return tilePressed(action.x, action.y, state);\n    case TILE_GROUP_PRESSED:\n      return tileGroupPressed(action.x, action.y, state);\n    case RELEASE_PRESSED:\n      return releasePressed(state);\n    default:\n      throw new Error('Unexpected action');\n  }\n}\n\nexport default reducer\n","import { useReducer, useState } from 'react';\n\nimport Board from './components/Board'\nimport reducer, { initialState, DEFAULT_BOARD_SIZE, DEFAULT_MINE_COUNT } from './reducer'\n\nimport './App.css';\n\nfunction App() {\n  const [ game, dispatch ] = useReducer(reducer, initialState)\n  const [ difficulty, setDifficulty ] = useState({\n    boardHeight: DEFAULT_BOARD_SIZE,\n    boardWidth: DEFAULT_BOARD_SIZE,\n    mineCount: DEFAULT_MINE_COUNT\n  })\n  const itemsFlagged = game.board.filter(t => t.isFlagged)\n  const itemsPressed = game.board.filter(t => t.isPressed)\n\n  const handleDifficultyChange = (event) => {\n    let { mineCount, boardWidth, boardHeight } = difficulty\n    if (event.target.value === 'expert') {\n      mineCount = 99\n      boardHeight = 16\n      boardWidth = 30\n    } else if (event.target.value === 'intermediate') {\n      mineCount = 40\n      boardHeight = 16\n      boardWidth = 16\n    } else if (event.target.value === 'beginner') {\n      mineCount = DEFAULT_MINE_COUNT\n      boardHeight = DEFAULT_BOARD_SIZE\n      boardWidth = DEFAULT_BOARD_SIZE\n    }\n    if (game.gameState !== 'in-progress') {\n      dispatch({ type: 'reset', config: { boardHeight, boardWidth, mineCount } })\n    }\n    setDifficulty({ boardHeight, boardWidth, mineCount, isCustom: event.target.value === 'custom' });\n  }\n\n  const getGameStateIcon = (gameState) => {\n    if (gameState === 'lost') {\n      return '💀'\n    } else if (gameState === 'won') {\n      return '🎉'\n    } else if (itemsPressed.length > 0) {\n      return '😯'\n    }\n    return '🙂'\n  }\n\n  const handleValueChange = (value, field) => {\n    // you can't place more bombs than the size of the grid - 2\n    if (value < 1 || (field === 'mineCount' && value > (difficulty.boardHeight * difficulty.boardWidth -2 ))) {\n      return\n    }\n    setDifficulty({\n      ...difficulty,\n      [field]: value\n    })\n    dispatch({ type: 'reset', config: {\n      ...difficulty,\n      [field]: value\n    } })\n  }\n\n  return (\n    <div className=\"minesweeper\">\n      <div className=\"gameState\">\n        <button className=\"icon\" onClick={() => { dispatch({ type: 'reset', config: difficulty }) }}>{getGameStateIcon(game.gameState)}</button>\n        <div>\n          <span>Difficulty</span>\n          <select onChange={handleDifficultyChange} disabled={game.gameState === 'in-progress'}>\n            <option value=\"beginner\">Beginner</option>\n            <option value=\"intermediate\">Intermediate</option>\n            <option value=\"expert\">Expert</option>\n            <option value=\"custom\">Custom</option>\n          </select>\n          {difficulty.isCustom && (\n            <form>\n              <label>rows:</label>\n              <input onChange={(e) => handleValueChange(e.target.value, 'boardHeight')} type=\"number\" value={difficulty.boardHeight} disabled={game.gameState === 'in-progress'} /> <br/>\n              <label>columns:</label>\n              <input onChange={(e) => handleValueChange(e.target.value, 'boardWidth')}  type=\"number\" value={difficulty.boardWidth} disabled={game.gameState === 'in-progress'} /> <br/>\n              <label>bombs:</label>\n              <input onChange={(e) => handleValueChange(e.target.value, 'mineCount')} type=\"number\" value={difficulty.mineCount} disabled={game.gameState === 'in-progress'} /> <br/>\n            </form>\n          )}\n        </div>\n        <span>Bombs left: {game.mineCount - itemsFlagged.length}</span>\n      </div>\n      <Board game={game} dispatch={dispatch} />\n      <div className=\"controls\">\n        <b>Controls</b> <br/>\n        Click: Open tile <br/>\n        Shift + click: Open tile group <br/>\n        Right click: Flag/Unflag tile\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}