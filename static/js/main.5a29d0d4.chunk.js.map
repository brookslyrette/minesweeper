{"version":3,"sources":["minesweeper.js","actions.js","components/Tile.js","components/Board.js","reducer.js","App.js","reportWebVitals.js","index.js"],"names":["generateEmptyBoard","boardSize","board","x","y","push","id","isOpen","isBomb","isFlagged","isPressed","adjacentBombCount","openTile","tile","state","console","log","neighbours","filter","t","isNeighbour","calculateAdjacentMineCount","find","length","checkGameStatus","tilesToReveal","i","mineCount","gameState","TILE_CLICKED","TILE_GROUP_CLICKED","FLAG_TITLE","UNFLAG_TILE","TILE_PRESSED","TILE_GROUP_PRESSED","RELEASE_PRESSED","tileClicked","clickedX","clickedY","clicked","minesPlaced","rand","Math","random","debug","count","generateBoard","Tile","item","dispatch","isGameOver","handleMouseUp","type","className","onClick","event","shiftKey","onContextMenu","preventDefault","onMouseDown","onMouseUp","onMouseOut","getTileContent","Board","game","items","rowItems","map","initialState","reducer","action","config","postClickState","postGroupClickState","forEach","n","tileGroupClicked","mineFlagged","mineUnflagged","tilePressed","tileGroupPressed","releasePressed","Error","App","useReducer","useState","difficulty","setDifficulty","itemsFlagged","onChange","target","value","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a29d0d4.chunk.js","sourcesContent":["\nexport const generateEmptyBoard = (boardSize) => {\n  const board = [];\n  // create a board for the current game size\n  for (let x = 0; x < boardSize; x++) {\n    for (let y = 0; y < boardSize; y++) {\n      board.push({\n        id: `${x}:${y}`,\n        x,\n        y,\n        isOpen: false,\n        isBomb: false,\n        isFlagged: false,\n        isPressed: false,\n        adjacentBombCount: 0\n      })\n    }\n  }\n  return board\n}\n\nexport const generateBoard = (clickedX, clickedY, state) => {\n  if (state.gameState !== 'initial') {\n    return\n  }\n  let minesPlaced = 0;\n  while (minesPlaced < state.mineCount) {\n    for (let x = 0; x < state.boardSize; x++) {\n      for (let y = 0; y < state.boardSize; y++) {\n        // don't place a mine where the user clicked\n        if (x === clickedX && y === clickedY) {\n          continue;\n        } else {\n          const rand = Math.random()\n          const tile = state.board.find(t => t.id === `${x}:${y}`)\n          if (rand > 0.992 && minesPlaced < state.mineCount && !tile.isBomb) {\n            tile.isBomb = true\n            console.log(`planted bomb at ${tile.x}:${tile.y}`);\n            minesPlaced++\n          }\n        }\n      }\n    }\n    console.debug(`finished cycle; planted ${minesPlaced} mines; total mines left to plant: ${state.mineCount - minesPlaced}`)\n  }\n  // now that we've placed all the mines, generate the adjacent mine count for all tiles\n  for (let t of state.board) {\n    const count = calculateAdjacentMineCount(t.x, t.y, state)\n    t.adjacentBombCount = count\n  }\n  state.gameState = 'in-progress'\n}\n\nexport const openTile = (tile, state) => {\n  console.log(`opening ${tile.x}:${tile.y} isBomb: ${tile.isBomb}`)\n  tile.isOpen = true\n  // if we have zero adjacent bombs open our neighbours.\n  if (tile.adjacentBombCount === 0 && !tile.isBomb) {\n    const neighbours = state.board.filter(t => isNeighbour(t, tile) && !t.isBomb && !t.isOpen && !t.isFlagged)\n    for (let n of neighbours) {\n      openTile(n, state)\n    }\n  }\n}\n\nexport const isNeighbour = (t, tile) => {\n  // above and below\n  if (t.x === tile.x && (t.y === tile.y - 1 || t.y === tile.y + 1)) {\n    return true\n  }\n  // to the left and the right\n  else if (t.y === tile.y && (t.x === tile.x - 1 || t.x === tile.x + 1)) {\n    return true\n  }\n  // left 1: above and below\n  if (t.x === tile.x - 1 && (t.y === tile.y - 1 || t.y === tile.y + 1)) {\n    return true\n  }\n  // right 1: above and below\n  if (t.x === tile.x + 1 && (t.y === tile.y - 1 || t.y === tile.y + 1)) {\n    return true\n  }\n  return false\n}\n\nexport const calculateAdjacentMineCount = (x, y, state) => {\n  const tile = state.board.find(t => t.id === `${x}:${y}`);\n  const neighbours = state.board.filter(t => isNeighbour(t, tile))\n  const adjacentBombs = neighbours.filter(t => t.isBomb)\n  return adjacentBombs.length\n}\n\nexport const checkGameStatus = (state) => {\n  let tilesToReveal = 0;\n  for(let i = 0; i < state.board.length; i++) {\n    const t = state.board[i];\n    if (t.isBomb && t.isOpen) {\n      return 'lost'\n    } else if (!t.isOpen) {\n      tilesToReveal++;\n    }\n  }\n  if (tilesToReveal === state.mineCount) {\n    return 'won';\n  }\n  return state.gameState\n}\n","import { openTile, isNeighbour, generateBoard } from './minesweeper'\n\nexport const TILE_CLICKED = 'tile-click'\nexport const TILE_GROUP_CLICKED = 'tile-group-click'\nexport const FLAG_TITLE = 'flag-tile'\nexport const UNFLAG_TILE = 'unflag-tile'\nexport const RESET = 'reset'\nexport const TILE_PRESSED = 'tile-press'\nexport const TILE_GROUP_PRESSED = 'tile-group-press'\nexport const RELEASE_PRESSED = 'release-pressed'\n\nexport const tileGroupClicked = (clickedX, clickedY, state) => {\n  if (state.gameState === 'in-progress') {\n    const clicked = state.board.find(t => t.id === `${clickedX}:${clickedY}`)\n    const neighbours = state.board.filter(t => isNeighbour(t, clicked) && !t.isOpen && !t.isFlagged)\n\n    openTile(clicked, state)\n    neighbours.forEach(n => openTile(n, state));\n  }\n  return {\n    ...state\n  }\n}\n\nexport const tileClicked = (clickedX, clickedY, state) => {\n  const clicked = state.board.find(t => t.id === `${clickedX}:${clickedY}`)\n  if (state.gameState === 'initial') {\n    generateBoard(clickedX, clickedY, state)\n    openTile(clicked, state)\n  } else if (state.gameState === 'in-progress') {\n    openTile(clicked, state)\n  }\n  return {\n    ...state\n  };\n}\n\nexport const mineFlagged = (clickedX, clickedY, state) => {\n  if (state.gameState === 'in-progress') {\n    const clicked = state.board.find(t => t.id === `${clickedX}:${clickedY}`)\n    clicked.isFlagged = true\n  }\n\n  return {\n    ...state\n  };\n}\n\nexport const mineUnflagged = (clickedX, clickedY, state) => {\n  if (state.gameState === 'in-progress') {\n    const clicked = state.board.find(t => t.id === `${clickedX}:${clickedY}`)\n    clicked.isFlagged = false\n  }\n\n  return {\n    ...state\n  };\n}\n\nexport const tilePressed = (clickedX, clickedY, state) => {\n  if (state.gameState === 'in-progress' || state.gameState === 'initial') {\n    const clicked = state.board.find(t => t.id === `${clickedX}:${clickedY}`)\n    clicked.isPressed = true\n  }\n\n  return {\n    ...state\n  };\n}\n\nexport const tileGroupPressed = (clickedX, clickedY, state) => {\n  if (state.gameState === 'in-progress') {\n    const clicked = state.board.find(t => t.id === `${clickedX}:${clickedY}`)\n    const neighbours = state.board.filter(t => isNeighbour(t, clicked) && !t.isOpen && !t.isFlagged)\n    clicked.isPressed = true\n    for (let n of neighbours) {\n      n.isPressed = true\n    }\n  }\n\n  return {\n    ...state\n  };\n}\n\nexport const releasePressed = (state) => {\n  for (let t of state.board) {\n    t.isPressed = false\n  }\n  return {\n    ...state\n  };\n}\n","import  { TILE_CLICKED, TILE_GROUP_CLICKED, FLAG_TITLE, UNFLAG_TILE, TILE_PRESSED, TILE_GROUP_PRESSED, RELEASE_PRESSED } from '../actions'\n\nconst Tile = ({ item, dispatch, isGameOver }) => {\n\n  const handleRightClick = (event) => {\n    event.preventDefault()\n    if (item.isOpen) {\n      return;\n    }\n\n    if (!item.isFlagged) {\n      dispatch({ type: FLAG_TITLE, x: item.x, y: item.y })\n    } else {\n      dispatch({ type: UNFLAG_TILE, x: item.x, y: item.y })\n    }\n  }\n\n  const handleClick = (event) => {\n    // if you shift click we click a group of tiles.\n    if (event.shiftKey) {\n      dispatch({ type: TILE_GROUP_CLICKED, x: item.x, y: item.y })\n    } else {\n      if (item.isOpen || item.isFlagged) {\n        return;\n      }\n      dispatch({ type: TILE_CLICKED, x: item.x, y: item.y })\n    }\n  }\n\n  const handleMouseDown = (event) => {\n    // if you shift click we click a group of tiles.\n    if (event.shiftKey) {\n      dispatch({ type: TILE_GROUP_PRESSED, x: item.x, y: item.y })\n    } else {\n      if (item.isOpen || item.isFlagged) {\n        return;\n      }\n      dispatch({ type: TILE_PRESSED, x: item.x, y: item.y })\n    }\n  }\n\n  const handleMouseUp = () => {\n    dispatch({ type: RELEASE_PRESSED })\n  }\n\n  const getTileContent = (item) => {\n    if (item.isBomb && item.isOpen) {\n      return '💥'\n    }\n    else if (isGameOver && item.isBomb && !item.isOpen && !item.isFlagged) {\n      return '💣';\n    } else if (item.isFlagged) {\n      return '⛳';\n    } else if (item.isOpen && item.adjacentBombCount > 0) {\n      return item.adjacentBombCount;\n    }\n  }\n\n  return (\n    <div\n      className={`tile ${isGameOver ? 'gameOver' : ''} mine-count${ item.isBomb ? '' : item.adjacentBombCount} ${item.isPressed ? 'pressed' : ''} ${item.isOpen ? '' : 'hiddenTile'} ${item.isFlagged ? 'flaggedTile' : ''}`}\n      onClick={handleClick}\n      onContextMenu={handleRightClick}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseOut={handleMouseUp}\n    >\n      {getTileContent(item)}\n    </div>\n  )\n}\n\nexport default Tile\n","import Tile from './Tile'\n\nconst Board = ({ game, dispatch }) => {\n  const items = []\n  const isGameOver = game.gameState === 'won' || game.gameState === 'lost'\n\n  for(let i = 0; i < game.boardSize; i++) {\n    const rowItems = game.board.filter(t => t.x === i);\n    items.push(\n      <div className=\"row\" key={i}>\n        {rowItems.map(t => (<Tile key={t.id} item={t} isGameOver={isGameOver} dispatch={dispatch} />) )}\n      </div>\n    )\n  }\n\n  return (\n    <>\n      {items}\n    </>\n  )\n}\n\nexport default Board\n","import { generateEmptyBoard, checkGameStatus } from './minesweeper'\nimport {\n  tileClicked,\n  tileGroupClicked,\n  mineFlagged,\n  mineUnflagged,\n  tilePressed,\n  tileGroupPressed,\n  releasePressed,\n  TILE_CLICKED,\n  TILE_GROUP_CLICKED,\n  FLAG_TITLE,\n  UNFLAG_TILE,\n  TILE_PRESSED,\n  TILE_GROUP_PRESSED,\n  RELEASE_PRESSED,\n  RESET\n} from './actions'\n\nexport const DEFAULT_BOARD_SIZE = 10\nexport const DEFAULT_MINE_COUNT = 9\n\nexport const initialState = {\n  gameState: 'initial',\n  boardSize: DEFAULT_BOARD_SIZE,\n  mineCount: DEFAULT_MINE_COUNT,\n  board: generateEmptyBoard(DEFAULT_BOARD_SIZE)\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case RESET:\n      return {\n        ...state,\n        gameState: 'initial',\n        boardSize: action.config.boardSize,\n        mineCount: action.config.mineCount,\n        board: generateEmptyBoard(action.config.boardSize)\n      }\n    case TILE_CLICKED:\n      const postClickState = tileClicked(action.x, action.y, state)\n      return {\n        ...postClickState,\n        gameState: checkGameStatus(postClickState)\n      };\n    case TILE_GROUP_CLICKED:\n      const postGroupClickState = tileGroupClicked(action.x, action.y, state);\n      return {\n        ...postGroupClickState,\n        gameState: checkGameStatus(postGroupClickState)\n      };\n    case FLAG_TITLE:\n      return mineFlagged(action.x, action.y, state);\n    case UNFLAG_TILE:\n      return mineUnflagged(action.x, action.y, state);\n    case TILE_PRESSED:\n      return tilePressed(action.x, action.y, state);\n    case TILE_GROUP_PRESSED:\n      return tileGroupPressed(action.x, action.y, state);\n    case RELEASE_PRESSED:\n      return releasePressed(state);\n    default:\n      throw new Error('Unexpected action');\n  }\n}\n\nexport default reducer\n","import { useReducer, useState } from 'react';\n\nimport Board from './components/Board'\nimport reducer, { initialState, DEFAULT_BOARD_SIZE, DEFAULT_MINE_COUNT } from './reducer'\n\nimport './App.css';\n\nfunction App() {\n  const [ game, dispatch ] = useReducer(reducer, initialState)\n  const [ difficulty, setDifficulty ] = useState({\n    boardSize: DEFAULT_BOARD_SIZE,\n    mineCount: DEFAULT_MINE_COUNT\n  })\n\n  const handleDifficultyChange = (event) => {\n    let mineCount = DEFAULT_MINE_COUNT\n    let boardSize = DEFAULT_BOARD_SIZE\n    if (event.target.value === 'expert') {\n      mineCount = 99\n      boardSize = 25\n    } else if (event.target.value === 'intermediate') {\n      mineCount = 40\n      boardSize = 16\n    }\n    if (game.gameState === 'initial') {\n      dispatch({ type: 'reset', config: { boardSize, mineCount } })\n    }\n    setDifficulty({ boardSize, mineCount });\n  }\n\n  const itemsFlagged = game.board.filter(t => t.isFlagged)\n\n  return (\n    <div className=\"minesweeper\">\n      <div className=\"gameState\">\n        State: {game.gameState}\n        <div>\n          <span>Difficulty</span>\n          <select onChange={handleDifficultyChange} disabled={game.gameState === 'in-progress'}>\n            <option value=\"beginner\">Beginner</option>\n            <option value=\"intermediate\">Intermediate</option>\n            <option value=\"expert\">Expert</option>\n          </select>\n          <button onClick={() => { dispatch({ type: 'reset', config: difficulty }) }}>Reset</button>\n        </div>\n        <span>Bombs left: {game.mineCount - itemsFlagged.length}</span>\n      </div>\n      <Board game={game} dispatch={dispatch} />\n      <div className=\"controls\">\n        <b>Controls</b> <br/>\n        Click: Open tile <br/>\n        Shift + click: Open tile group <br/>\n        Right click: Flag/Unflag tile\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}